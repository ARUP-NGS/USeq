package edu.utah.seq.data;

import java.io.*;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.math3.stat.inference.ChiSquareTest;

import util.gen.*;

/**
 * @author Nix
 * Takes the count table generated by DRDS with the -z option and looks for changes in 5'/3' read coverage between different conditions
 * */
public class DifferentialReadCoverageComparator {

	//user fields
	private File drdsTable;
	private double minimumCounts = 30;
	private ChiSquareTest chiSquare = new ChiSquareTest();
	private double minimumTransPVal = 13;
	private double minimumLog2Rto = 1;
	private ChangedGene[] changedGenes = null;

	//comparator
	public DifferentialReadCoverageComparator(String[] args){
		//start clock
		long startTime = System.currentTimeMillis();

		//process args
		processArgs(args);

		//compare gene by gene
		compareGenes();
		
		//print
		printChangedGenes();

		//finish and calc run time
		double diffTime = ((double)(System.currentTimeMillis() -startTime))/60000;
		System.out.println("\nDone! "+Math.round(diffTime)+" min\n");
	}

	private void printChangedGenes() {
		if (changedGenes == null) System.out.println("No changed genes found to pass thresholds!");
		else System.out.println(changedGenes.length+" genes found with diff 5' 3' coverages");
		String name = Misc.removeExtension(drdsTable.getName());
		File res = new File(drdsTable.getParentFile(), name+"_DRCC.xls");
		try {
			PrintWriter out = new PrintWriter (new FileWriter(res));
			out.println("GeneName\tFirstName\tSecondName\tTransPVal\tLog2Rto\tFirst5'Count\tFirst3'Count\tSecond5'Count\tSecond3'Count");
			for (ChangedGene cg : changedGenes) out.println(cg);
			out.close();
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		
		
	}

	private void compareGenes() {
		try{
			BufferedReader in = IO.fetchBufferedReader(drdsTable);
			
			//read in header
			String[] header = Misc.TAB.split(in.readLine());
			
			String line;
			String[] tokens;
			double maxTransPVal = 0;
			ArrayList<ChangedGene> changedGenesAL = new ArrayList<ChangedGene>();
			double numberTests = 0;
			while ((line = in.readLine()) != null){
				tokens = Misc.TAB.split(line);
				String geneName = tokens[0];
				//for each condition, make comparisons
				for (int i=1; i< tokens.length; i++){
					String firstPair = header[i];
					int[] firstFiveThree = parse (tokens[i]);
					//enought counts?
					if (Num.sumIntArray(firstFiveThree) < minimumCounts) continue;
					for (int j=i+1; j< tokens.length; j++){
						String secondPair = header[j];
						int[] secondFiveThree = parse (tokens[j]);
						if (Num.sumIntArray(secondFiveThree) < minimumCounts) continue;
						//pval
						double transPVal = estimatePValue(firstFiveThree, secondFiveThree);
						numberTests++;
						if (transPVal == Double.MIN_VALUE || transPVal < minimumTransPVal) continue;
						//set max?
						if (transPVal != Double.MAX_VALUE && transPVal > maxTransPVal) maxTransPVal = transPVal;
						//log2
						double log2Rto = estimateLogRto(firstFiveThree, secondFiveThree);
						//save it?
						if (Math.abs(log2Rto) < minimumLog2Rto) continue;
						ChangedGene cg = new ChangedGene(geneName, firstPair, secondPair, transPVal, log2Rto, firstFiveThree, secondFiveThree);
						changedGenesAL.add(cg);
					}
				}
			}
			
			//fix pvals and filter
			ChangedGene[] all = new ChangedGene[changedGenesAL.size()];
			changedGenesAL.toArray(all);
			changedGenesAL.clear();
			//bonferroni correction
			double bc = Num.minus10log10(numberTests);			
			maxTransPVal = 1.05 * maxTransPVal;
			for (int i=0; i< all.length; i++){
				if (all[i].getTransPVal() == Double.MAX_VALUE) all[i].setTransPVal(maxTransPVal);
				double corrTransPVal = all[i].getTransPVal() + bc;
				if (corrTransPVal < this.minimumTransPVal) continue;
				all[i].setTransPVal(corrTransPVal);
				changedGenesAL.add(all[i]);
			}
			
			if (changedGenesAL.size() !=0){
				changedGenes = new ChangedGene[changedGenesAL.size()];
				changedGenesAL.toArray(changedGenes);
			}
			
			in.close();
		} catch (Exception e){
			e.printStackTrace();
			System.exit(0);
		}
	}

	private class ChangedGene {
		String geneName;
		String firstPairName;
		String secondPairName;
		double transPVal;
		double log2Rto;
		int firstFivePrimeCount;
		int firstThreePrimeCount;
		int secondFivePrimeCount;
		int secondThreePrimeCount;
		
		public ChangedGene (String geneName, String firstPairName, String secondPairName, double transPVal, double log2Rto, int[] firstCounts, int[] secondCounts){
			this.geneName = geneName;
			this.firstPairName = firstPairName;
			this.secondPairName = secondPairName;
			this.transPVal = transPVal;
			this.log2Rto = log2Rto;
			this.firstFivePrimeCount = firstCounts[0];
			this.firstThreePrimeCount = firstCounts[1];
			this.secondFivePrimeCount = secondCounts[0];
			this.secondThreePrimeCount = secondCounts[1];
		}
		
		public String toString(){
			StringBuilder sb = new StringBuilder();
			sb.append(geneName); sb.append("\t");
			sb.append(firstPairName); sb.append("\t");
			sb.append(secondPairName); sb.append("\t");
			sb.append(transPVal); sb.append("\t");
			sb.append(log2Rto); sb.append("\t");
			sb.append(firstFivePrimeCount); sb.append("\t");
			sb.append(firstThreePrimeCount); sb.append("\t");
			sb.append(secondFivePrimeCount); sb.append("\t");
			sb.append(secondThreePrimeCount); 
			return sb.toString();
		}

		public double getTransPVal() {
			return transPVal;
		}
		public void setTransPVal(double transPVal) {
			this.transPVal = transPVal;
		}
		
	}


	private double estimateLogRto(int[] firstFiveThree, int[] secondFiveThree) {
		double first = (((double)firstFiveThree[0])+1.0) / (((double)firstFiveThree[1])+1.0);
		double second = (((double)secondFiveThree[0])+1.0) / (((double)secondFiveThree[1])+1.0);
		return Num.log2(first/second);
	}

	private double estimatePValue(int[] firstFiveThree, int[] secondFiveThree) {
		try {
			long[][] counts = new long[][]{{firstFiveThree[0], firstFiveThree[1]},{secondFiveThree[0],secondFiveThree[1]}};
			//calc pval
			double pVal = chiSquare.chiSquareTest(counts);
			if (pValCheck(pVal) == false) {
				//System.out.println("Bad pval "+pVal);
				//Misc.printArray(counts);
				return Double.MIN_VALUE;
			}
			if (pVal == 0) pVal = Double.MAX_VALUE;
			else pVal = Num.minus10log10(pVal);
			return pVal;
			
		} catch (Exception e) {
			Misc.printErrAndExit(e.getLocalizedMessage());
		}
		return Double.MIN_VALUE;
	}
	
	public static boolean pValCheck(double pval){
		if (Double.isInfinite(pval) || Double.isNaN(pval) || pval <0) {
			return false;
		}
		return true;
	}

	private int[] parse(String string) {
		String[] s = Misc.COLON.split(string);
		int five = Integer.parseInt(s[0]);
		int three = Integer.parseInt(s[1]);
		return new int[]{five, three};
	}

	public static void main(String[] args) {
		if (args.length ==0){
			printDocs();
			System.exit(0);
		}
		new DifferentialReadCoverageComparator(args);
	}		


	/**This method will process each argument and assign new variables*/
	public void processArgs(String[] args){
		Pattern pat = Pattern.compile("-[a-z]");
		System.out.println("\n"+IO.fetchUSeqVersion()+" Arguments: "+Misc.stringArrayToString(args, " ")+"\n");
		for (int i = 0; i<args.length; i++){
			String lcArg = args[i].toLowerCase();
			Matcher mat = pat.matcher(lcArg);
			if (mat.matches()){
				char test = args[i].charAt(1);
				try{
					switch (test){
					case 'd': drdsTable = new File (args[++i]); break;
					case 'c': minimumCounts = Integer.parseInt(args[++i]); break;
					case 'p': minimumTransPVal = Double.parseDouble(args[++i]); break;
					case 'r': minimumLog2Rto = Double.parseDouble(args[++i]); break;
					case 'h': printDocs(); System.exit(0);
					default: Misc.printExit("\nProblem, unknown option! " + mat.group());
					}
				}
				catch (Exception e){
					Misc.printExit("\nSorry, something doesn't look right with this parameter: -"+test+"\n");
				}
			}
		}
		if (drdsTable == null || drdsTable.exists() == false) Misc.printErrAndExit("\nError: can't find your DRDS -z count table file? Aborting.\n");
	}	


	public static void printDocs(){
		System.out.println("\n" +
				"**************************************************************************************\n" +
				"**                     Differential Read Coverage Comparator : June 2014            **\n" +
				"**************************************************************************************\n" +
				"Looks for changes in the 5' and 3' ratio between conditions. \n\n" +

				"Required Options:\n"+
				"-d Full path to the gene count table from DRDS run with the -z option.\n"+

				"\nDefault Options:\n"+
				"-c Minimum counts to score for differential 5'/ 3' in a gene, defaults to 30.\n"+
				"-p Minimum -10Log10(adjPVal) to print gene, defaults to 13.\n"+
				"-r Minimum abs(log2Rto) to print gene, defaults to 1.\n"+
				"\n"+

				"Example: java -Xmx1500M -jar pathTo/USeq/Apps/DifferentialReadCoverageComparator\n"+
				"      -d ~/geneCountTableMin10.txt.gz -r 1.5 \n\n"+

				"**************************************************************************************\n");

	}	

}
